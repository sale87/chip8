namespace Chip8.Tests;

public class Chip8Test
{
    private Chip8Emu _c8;

    public Chip8Test()
    {
        _c8 = new Chip8Emu();
    }

    [Fact]
    public void TestMemoryLength()
    {
        Assert.Equal(4096, _c8.Memory.Length);
    }

    [Fact]
    public void TestReadMemory()
    {
        Assert.Equal(0x00, _c8.ReadMemory(0xF0, 1)[0]);
    }

    [Fact]
    public void TestSetMemory()
    {
        short addr = 0xFF;
        byte data = 0xF0;
        _c8.SetMemory(addr, data);
        Assert.Equal(data, _c8.ReadMemory(addr, 1)[0]);
    }

    [Fact]
    public void TestFontIsSetWhenClassIsInitialized()
    {
        byte[] font = [
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F
        ];
        byte[] bytes = _c8.ReadMemory(0x50, 80);
        Assert.Equal(font, bytes);
    }
}